# 第 11 章 - Canvas 畫布、圖表與動畫

# 網頁畫布 Canvas

## 參考文獻

* 重要： [MDN : Canvas 教學文件](https://developer.mozilla.org/zh-TW/docs/Web/Guide/HTML/Canvas_tutorial)
* 讚！ [HTML5 Canvas Image Tutorial](http://www.html5canvastutorials.com/tutorials/html5-canvas-images/)
* <http://www.w3schools.com/tags/canvas_drawimage.asp>
* [淺談Canvas - save/restore](http://blog.ring.idv.tw/comment.ser?i=386)

## [HTML5 Canvas Image Tutorial](http://www.html5canvastutorials.com/tutorials/html5-canvas-images/) 的範例

範例 1 ： <http://www.html5canvastutorials.com/tutorials/html5-canvas-line-width/>

範例 2 ： <http://www.html5canvastutorials.com/tutorials/html5-canvas-line-caps/>

範例 3 ： <http://www.html5canvastutorials.com/tutorials/html5-canvas-circles/>

範例 4 ： <http://www.html5canvastutorials.com/tutorials/html5-canvas-rectangles/>

範例 5 ： <http://www.html5canvastutorials.com/advanced/html5-canvas-transform-rotate-tutorial/>

範例 6 ： <http://www.html5canvastutorials.com/tutorials/html5-canvas-text-color/>

範例 7 ： <http://www.html5canvastutorials.com/tutorials/html5-canvas-images/>

範例 8 ： <http://www.html5canvastutorials.com/advanced/html5-canvas-invert-image-colors-tutorial/>

範例 9 ： <http://www.html5canvastutorials.com/advanced/html5-canvas-grayscale-image-colors-tutorial/>

範例 10 ： <http://www.html5canvastutorials.com/advanced/html5-canvas-save-drawing-as-an-image/>

範例 11 ： <http://www.html5canvastutorials.com/advanced/html5-canvas-animation-stage/>

範例 12 ： <http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/>

# 繪圖範例

* 參考： <http://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_drawimage>

## 程式範例

檔案： [canvas.html](http://ccc.nqu.edu.tw/db/jsb/code/canvas/canvas.html)

```
<!DOCTYPE html>
<html>
<body>
<img id="ball" width="220" height="277" src="ball.jpg" alt="The Scream" style="display:none">
<p>Canvas:</p>
<canvas id="myCanvas" width="240" height="297" style="border:1px solid #d3d3d3;"/>
<script>
window.onload = function() {
  var c = document.getElementById("myCanvas");
  var ctx = c.getContext("2d");
  var img = document.getElementById("ball");
  ctx.drawImage(img, 10, 100);
  ctx.beginPath();
  ctx.strokeStyle="red";
  ctx.rect(20,20,40,40);
  ctx.stroke();
  ctx.beginPath();
  ctx.fillStyle="#0000FF";
  ctx.fillRect(80,20,50,50);
  ctx.stroke();   
  ctx.beginPath();
  ctx.strokeStyle = "black";
  ctx.lineWidth = 5;
  ctx.arc(100,75,50,0,2*Math.PI);
  ctx.stroke();   
}
</script>

</body>
</html>

```

執行結果

![[]](canvasGraphicsExample.jpg)

# 移動球 1

檔案： [ballmove1.html](http://ccc.nqu.edu.tw/db/jsb/code/canvas/ballmove1.html)

```
<!DOCTYPE html>
<html>
<body>
<img id="ball" src="ball.jpg" alt="The Scream">
<p>Canvas:</p>
<canvas id="myCanvas" width="300" height="300" style="border:1px solid #d3d3d3;"/>
<script>
var img, ctx, canvas;
var x=0, y=0;

window.onload = function() {
  canvas = document.getElementById("myCanvas");
  ctx = canvas.getContext("2d");
  img = document.getElementById("ball");
  setTimeout(draw, 100);
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(img, x, y);
	x+=10; y+=10;
  setTimeout(draw, 100);	
}

</script>

</body>
</html>

```

# 移動球 2

檔案： [ballmove2.html](http://ccc.nqu.edu.tw/db/jsb/code/canvas/ballmove2.html)

```html
<!DOCTYPE html>
<html>
<body>
<img id="ball" width="220" height="277" src="ball.jpg" alt="The Scream" style="display:none">
<p>Canvas:</p>
<canvas id="myCanvas" width="240" height="297" style="border:1px solid #d3d3d3;"/>
<script>
var img, ctx, canvas;
var x=0, y=0;

window.onload = main;

function update() {
	x+=2; y+=2;
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(img, x, y);
}

function main() {
  img = document.getElementById("ball");
  canvas = document.getElementById("myCanvas");
	ctx = canvas.getContext("2d");
	var loop = function() {
		update();
		draw();
		window.requestAnimationFrame(loop, canvas);
	};
	window.requestAnimationFrame(loop, canvas);
}

</script>

</body>
</html>

```

# 網頁手繪板

本程式簡化自以下文章中的範例，該範例可選顏色與粗細，但為了讓初學整更容易懂，筆者將顏色固定為黑色，粗細固定為 3，並去除了相關的程式碼。

* [[黑暗執行緒 -- 用100行實現HTML5可存檔塗鴉版]](http://blog.darkthread.net/post-2011-10-30-html5-canvas-sktechpad.aspx)


檔案： [painter.html](http://ccc.nqu.edu.tw/db/jsb/code/painter.html)

```
<!DOCTYPE html>
<html>
<head>
    <title>範例 -- 手寫板</title>
    <script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.6.4.js">
    </script>
    <script>
        var p_color = "black";
        var p_width = 3;
        $(function () {
            //取得canvas context
            var $canvas = $("#cSketchPad");
            var ctx = $canvas[0].getContext("2d");
            ctx.lineCap = "round";
            ctx.fillStyle = "white"; //整個canvas塗上白色背景避免PNG的透明底色效果
            ctx.fillRect(0, 0, $canvas.width(), $canvas.height());
            var drawMode = false;
            //canvas點選、移動、放開按鍵事件時進行繪圖動作
            $canvas.mousedown(function (e) {
                ctx.beginPath();
                ctx.strokeStyle = p_color;
                ctx.lineWidth = p_width;
                ctx.moveTo(e.pageX - $canvas.position().left, e.pageY - $canvas.position().top);
                drawMode = true;
            })
            .mousemove(function (e) {
                if (drawMode) {
                    ctx.lineTo(e.pageX - $canvas.position().left, e.pageY - $canvas.position().top);
                    ctx.stroke();
                }
            })
            .mouseup(function (e) {
                drawMode = false;
            });
        });
    </script>
</head>
<body>
 <div id="dCanvas">
  <canvas id="cSketchPad" width="300" height="300" style="border: 2px solid gray" />
 </div>
</body>
</html>
```


# 圖表繪製套件

* <http://www.runoob.com/highcharts/highcharts-tutorial.html>

# 遊戲設計 -- 移動球

## 參考文獻

* maxwihlborg -- 怎麼用 Canvas 寫遊戲的教學影片！
 * 首頁： <http://maxwihlborg.com/experiments/>
 * 程式專案： <https://github.com/maxwihlborg/youtube-tutorials/>
 * 線上展示： <http://www.maxwihlborg.com/youtube-demos/>
 * 影片： <https://www.youtube.com/playlist?list=PLDu4C7CHISoKbi-do2VKUfS6cv36C57y4>
 * 原始碼： <https://github.com/maxwihlborg/youtube-tutorials>

## 範例一 : 移動球 (不順暢)

檔案： @[[ballmove1.html]](code/canvas/ballmove1.html)

```
<!DOCTYPE html>
<html>
<body>
<img id="ball" src="ball.jpg" alt="The Scream">
<p>Canvas:</p>
<canvas id="myCanvas" width="300" height="300" style="border:1px solid #d3d3d3;"/>
<script>
var img, ctx, canvas;
var x=0, y=0;

window.onload = function() {
  canvas = document.getElementById("myCanvas");
  ctx = canvas.getContext("2d");
  img = document.getElementById("ball");
  setTimeout(draw, 100);
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(img, x, y);
  x+=10; y+=10;
  setTimeout(draw, 100);  
}

</script>

</body>
</html>

```

## 範例二 : 移動球 (順暢)

檔案： @[[ballmove2.html]](code/canvas/ballmove2.html)

```
<!DOCTYPE html>
<html>
<body>
<img id="ball" src="ball.jpg" alt="The Scream" style="display:none">
<p>Canvas:</p>
<canvas id="myCanvas" width="240" height="297" style="border:1px solid #d3d3d3;"/>
<script>
var img, ctx, canvas;
var x=0, y=0;

window.onload = main;

function update() {
  x+=2; y+=2;
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(img, x, y);
}

function main() {
  img = document.getElementById("ball");
  canvas = document.getElementById("myCanvas");
  ctx = canvas.getContext("2d");
  var loop = function() {
    update();
    draw();
    window.requestAnimationFrame(loop, canvas);
  };
  window.requestAnimationFrame(loop, canvas);
}

</script>

</body>
</html>

```

# 遊戲設計 -- 碰撞球

檔案： @[[ballgame1.html]](code/canvas/ballgame1.html)

```
<!DOCTYPE html>
<html>
<body>
<img id="ball" src="ball.jpg" alt="The Scream" style="display:none">
<p>Canvas:</p>
<canvas id="myCanvas" width="240" height="297" style="border:1px solid #d3d3d3;"/>
<script>
var img, ctx, canvas;
var x=0, y=0;

window.onload = main;

var dx = 2, dy=2;
function update() {
  x+=dx; y+=dy;
  if (x < 0 && dx < 0)
    dx = -1 * dx;
  else if (x+img.width >= canvas.width && dx > 0)
    dx = -1 * dx;
  if (y < 0 && dy < 0)
    dy = -1 * dy;
  else if (y+img.height >= canvas.height && dy > 0)
    dy = -1 * dy;
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(img, x, y);
}

function main() {
  img = document.getElementById("ball");
  canvas = document.getElementById("myCanvas");
  ctx = canvas.getContext("2d");
  var loop = function() {
    update();
    draw();
    window.requestAnimationFrame(loop, canvas);
  };
  window.requestAnimationFrame(loop, canvas);
}

</script>

</body>
</html>

```

* 課程 -- [HTML5 Game Development](https://www.udacity.com/course/html5-game-development--cs255)
 * [影片](https://www.udacity.com/course/viewer#!/c-cs255/l-74901984/m-75439252)


# 衛星定位與地圖 

## 參考文獻

* [Google Maps Javascript API](https://developers.google.com/maps/documentation/javascript/examples/)
 * [Simple Map](https://developers.google.com/maps/documentation/javascript/examples/map-simple) -- 簡單地圖。
 * [Geolocation](https://developers.google.com/maps/documentation/javascript/examples/map-geolocation) -- 定位！

## 範例: SimpleMap

```
<!DOCTYPE html>
<html>
  <head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>

var map;
function initMap() {
  map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: -34.397, lng: 150.644},
    zoom: 8
  });
}

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap"
        async defer></script>
  </body>
</html>
```

## 範例: Geolocation

```
<!DOCTYPE html>
<html>
  <head>
    <title>Geolocation</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>
// Note: This example requires that you consent to location sharing when
// prompted by your browser. If you see the error "The Geolocation service
// failed.", it means you probably did not give permission for the browser to
// locate you.

function initMap() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: -34.397, lng: 150.644},
    zoom: 6
  });
  var infoWindow = new google.maps.InfoWindow({map: map});

  // Try HTML5 geolocation.
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var pos = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };

      infoWindow.setPosition(pos);
      infoWindow.setContent('Location found.');
      map.setCenter(pos);
    }, function() {
      handleLocationError(true, infoWindow, map.getCenter());
    });
  } else {
    // Browser doesn't support Geolocation
    handleLocationError(false, infoWindow, map.getCenter());
  }
}

function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(browserHasGeolocation ?
                        'Error: The Geolocation service failed.' :
                        'Error: Your browser doesn\'t support geolocation.');
}

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&signed_in=true&callback=initMap"
        async defer>
    </script>
  </body>
</html>
```




# 簡易影像處理範例

## 參考文獻

本文主要參考 Ilmari Heikkinen 的 [Image Filters with Canvas](http://www.html5rocks.com/en/tutorials/canvas/imagefilters/) 這篇文章！

## 簡介

在 HTML5 的 canvas 區塊與相關的 JavaScript 函式庫出現之後，影像處理就成了網頁的新應用，本文將展示用 JavaScript 在網頁中進行影像處理的方法。

## 簡化程式

檔案： @[[imagefilter0.html]](code/imagefilter/imagefilter0.html)

注意：本程式不能在 local 執行，必須放上 server 才行，否則會有下列這種錯誤

* Uncaught SecurityError: Failed to execute 'getImageData' on 'CanvasRenderingContext2D': The canvas has been tainted by cross-origin data.

```
<html>
<head>
  <style>
canvas { display:block; }
figcaption, button { display:block; margin:10; paddikng:10}
#customMatrix input { text-align: center; }
  </style>
</head>
<body>
 <center>
  <figure>
    <img id="orig" src="demo_small.png" width="600" height="337">
    <figcaption>The original test image</figcaption>
  </figure>

  <figure>
    <canvas id="grayscale" width="600" height="337"></canvas>
    <button onclick="grayscale()">Grayscale the image</button>
  </figure>
 </center>	
  <script type="text/javascript">
    Filters = {};
    Filters.getPixels = function(img) {
      var c,ctx;
      if (img.getContext) {
        c = img;
        try { ctx = c.getContext('2d'); } catch(e) {}
      }
      if (!ctx) {
        c = this.getCanvas(img.width, img.height);
        ctx = c.getContext('2d');
        ctx.drawImage(img, 0, 0);
      }
      return ctx.getImageData(0,0,c.width,c.height);
    };

    Filters.getCanvas = function(w,h) {
      var c = document.createElement('canvas');
      c.width = w;
      c.height = h;
      return c;
    };

    Filters.filterImage = function(filter, image, var_args) {
      var args = [this.getPixels(image)];
      for (var i=2; i<arguments.length; i++) {
        args.push(arguments[i]);
      }
      return filter.apply(null, args);
    };

    Filters.grayscale = function(pixels, args) {
      var d = pixels.data;
      for (var i=0; i<d.length; i+=4) {
        var r = d[i];
        var g = d[i+1];
        var b = d[i+2];
        // CIE luminance for the RGB
        var v = 0.2126*r + 0.7152*g + 0.0722*b;
        d[i] = d[i+1] = d[i+2] = v
      }
      return pixels;
    };
  </script>
  <script>
    var img = document.getElementById('orig');
    img.addEventListener('load', function() {
    
      var canvases = document.getElementsByTagName('canvas');
      for (var i=0; i<canvases.length; i++) {
        var c = canvases[i];
        c.parentNode.insertBefore(img.cloneNode(true), c);
        c.style.display = 'none';
      }

      function runFilter(id, filter, arg1, arg2, arg3) {
        var c = document.getElementById(id);
        var s = c.previousSibling.style;
        var b = c.parentNode.getElementsByTagName('button')[0];
        if (b.originalText == null) {
          b.originalText = b.textContent;
        }
        if (s.display == 'none') {
          s.display = 'inline';
          c.style.display = 'none';
          b.textContent = b.originalText;
        } else {
          var idata = Filters.filterImage(filter, img, arg1, arg2, arg3);
          c.width = idata.width;
          c.height = idata.height;
          var ctx = c.getContext('2d');
          ctx.putImageData(idata, 0, 0);
          s.display = 'none';
          c.style.display = 'inline';
          b.textContent = 'Restore original image';
        }
      }

      grayscale = function() {
        runFilter('grayscale', Filters.grayscale);
      }
    }, false);
  </script>
</body>
</html>
```

# 各種影像處理範例

在前面的 [[簡易影像處理範例]](jsb:image) 當中我們看了一個將影像轉為灰階的範例，該範例是由下文中的範例簡化而來的。

* [Image Filters with Canvas](http://www.html5rocks.com/en/tutorials/canvas/imagefilters/)

接著我們同樣用上文的範例展示 javascript 的影像處理方法，更精確地說應該是影像濾波的方法。

以下是完整的範例。

## 完整範例

範例： [imagefilter.html](https://ccc.nqu.edu.tw/db/jsb/code/imagefilter/imagefilter.html)

```html
<html>
<head>
  <style>
canvas { display:block; }
figcaption, button { display:block; margin:10; paddikng:10}
#customMatrix input { text-align: center; }
  </style>
</head>
<body>
<center>
  <figure>
    <img id="orig" src="demo_small.png" width="600" height="337">
    <figcaption>The original test image</figcaption>
  </figure>

  <figure>
    <canvas id="grayscale" width="600" height="337"></canvas>
    <button onclick="grayscale()">Grayscale the image</button>
  </figure>

  <figure>
    <canvas id="brightness" width="600" height="337"></canvas>
    <button onclick="brightness()">Brighten the image</button>
  </figure>

  <figure>
    <canvas id="threshold" width="600" height="337"></canvas>
    <button onclick="threshold()">Threshold the image</button>
  </figure>

  <figure>
    <canvas id="sharpen" width="600" height="337"></canvas>
    <button onclick="sharpen()">Sharpen the image</button>
  </figure>

  <figure>
    <canvas id="blurC" width="600" height="337"></canvas>
    <button onclick="blurC()">Blur the image</button>
  </figure>

  <figure>
    <canvas id="sobel" width="600" height="337"></canvas>
    <button onclick="sobel()">Run a Sobel filter on the image</button>
  </figure>

  <figure>
    <canvas id="custom" width="600" height="337"></canvas>
		<br/><br/>
		<div id="customMatrix">
          <input type="text" value="1" size="3">
          <input type="text" value="1" size="3">
          <input type="text" value="1" size="3">
          <br>
          <input type="text" value="1" size="3">
          <input type="text" value="0.7" size="3">
          <input type="text" value="-1" size="3">
          <br>
          <input type="text" value="-1" size="3">
          <input type="text" value="-1" size="3">
          <input type="text" value="-1" size="3">
          <br>
    </div>
    <button onclick="custom()">Run the above filter on the image</button>
  </figure>
</center>	
  <script type="text/javascript">
        Filters = {};
        Filters.getPixels = function(img) {
          var c,ctx;
          if (img.getContext) {
            c = img;
            try { ctx = c.getContext('2d'); } catch(e) {}
          }
          if (!ctx) {
            c = this.getCanvas(img.width, img.height);
            ctx = c.getContext('2d');
            ctx.drawImage(img, 0, 0);
          }
          return ctx.getImageData(0,0,c.width,c.height);
        };

        Filters.getCanvas = function(w,h) {
          var c = document.createElement('canvas');
          c.width = w;
          c.height = h;
          return c;
        };

        Filters.filterImage = function(filter, image, var_args) {
          var args = [this.getPixels(image)];
          for (var i=2; i<arguments.length; i++) {
            args.push(arguments[i]);
          }
          return filter.apply(null, args);
        };

        Filters.grayscale = function(pixels, args) {
          var d = pixels.data;
          for (var i=0; i<d.length; i+=4) {
            var r = d[i];
            var g = d[i+1];
            var b = d[i+2];
            // CIE luminance for the RGB
            var v = 0.2126*r + 0.7152*g + 0.0722*b;
            d[i] = d[i+1] = d[i+2] = v
          }
          return pixels;
        };

        Filters.brightness = function(pixels, adjustment) {
          var d = pixels.data;
          for (var i=0; i<d.length; i+=4) {
            d[i] += adjustment;
            d[i+1] += adjustment;
            d[i+2] += adjustment;
          }
          return pixels;
        };

        Filters.threshold = function(pixels, threshold) {
          var d = pixels.data;
          for (var i=0; i<d.length; i+=4) {
            var r = d[i];
            var g = d[i+1];
            var b = d[i+2];
            var v = (0.2126*r + 0.7152*g + 0.0722*b >= threshold) ? 255 : 0;
            d[i] = d[i+1] = d[i+2] = v
          }
          return pixels;
        };

        Filters.tmpCanvas = document.createElement('canvas');
        Filters.tmpCtx = Filters.tmpCanvas.getContext('2d');

        Filters.createImageData = function(w,h) {
          return this.tmpCtx.createImageData(w,h);
        };

        Filters.convolute = function(pixels, weights, opaque) {
          var side = Math.round(Math.sqrt(weights.length));
          var halfSide = Math.floor(side/2);

          var src = pixels.data;
          var sw = pixels.width;
          var sh = pixels.height;

          var w = sw;
          var h = sh;
          var output = Filters.createImageData(w, h);
          var dst = output.data;

          var alphaFac = opaque ? 1 : 0;

          for (var y=0; y<h; y++) {
            for (var x=0; x<w; x++) {
              var sy = y;
              var sx = x;
              var dstOff = (y*w+x)*4;
              var r=0, g=0, b=0, a=0;
              for (var cy=0; cy<side; cy++) {
                for (var cx=0; cx<side; cx++) {
                  var scy = Math.min(sh-1, Math.max(0, sy + cy - halfSide));
                  var scx = Math.min(sw-1, Math.max(0, sx + cx - halfSide));
                  var srcOff = (scy*sw+scx)*4;
                  var wt = weights[cy*side+cx];
                  r += src[srcOff] * wt;
                  g += src[srcOff+1] * wt;
                  b += src[srcOff+2] * wt;
                  a += src[srcOff+3] * wt;
                }
              }
              dst[dstOff] = r;
              dst[dstOff+1] = g;
              dst[dstOff+2] = b;
              dst[dstOff+3] = a + alphaFac*(255-a);
            }
          }
          return output;
        };

        if (!window.Float32Array)
          Float32Array = Array;

        Filters.convoluteFloat32 = function(pixels, weights, opaque) {
          var side = Math.round(Math.sqrt(weights.length));
          var halfSide = Math.floor(side/2);

          var src = pixels.data;
          var sw = pixels.width;
          var sh = pixels.height;

          var w = sw;
          var h = sh;
          var output = {
            width: w, height: h, data: new Float32Array(w*h*4)
          };
          var dst = output.data;

          var alphaFac = opaque ? 1 : 0;

          for (var y=0; y<h; y++) {
            for (var x=0; x<w; x++) {
              var sy = y;
              var sx = x;
              var dstOff = (y*w+x)*4;
              var r=0, g=0, b=0, a=0;
              for (var cy=0; cy<side; cy++) {
                for (var cx=0; cx<side; cx++) {
                  var scy = Math.min(sh-1, Math.max(0, sy + cy - halfSide));
                  var scx = Math.min(sw-1, Math.max(0, sx + cx - halfSide));
                  var srcOff = (scy*sw+scx)*4;
                  var wt = weights[cy*side+cx];
                  r += src[srcOff] * wt;
                  g += src[srcOff+1] * wt;
                  b += src[srcOff+2] * wt;
                  a += src[srcOff+3] * wt;
                }
              }
              dst[dstOff] = r;
              dst[dstOff+1] = g;
              dst[dstOff+2] = b;
              dst[dstOff+3] = a + alphaFac*(255-a);
            }
          }
          return output;
        };
  </script>
  <script>
    var img = document.getElementById('orig');
    img.addEventListener('load', function() {

      var canvases = document.getElementsByTagName('canvas');
      for (var i=0; i<canvases.length; i++) {
        var c = canvases[i];
        c.parentNode.insertBefore(img.cloneNode(true), c);
        c.style.display = 'none';
      }

      function runFilter(id, filter, arg1, arg2, arg3) {
        var c = document.getElementById(id);
        var s = c.previousSibling.style;
        var b = c.parentNode.getElementsByTagName('button')[0];
        if (b.originalText == null) {
          b.originalText = b.textContent;
        }
        if (s.display == 'none') {
          s.display = 'inline';
          c.style.display = 'none';
          b.textContent = b.originalText;
        } else {
          var idata = Filters.filterImage(filter, img, arg1, arg2, arg3);
          c.width = idata.width;
          c.height = idata.height;
          var ctx = c.getContext('2d');
          ctx.putImageData(idata, 0, 0);
          s.display = 'none';
          c.style.display = 'inline';
          b.textContent = 'Restore original image';
        }
      }

      grayscale = function() {
        runFilter('grayscale', Filters.grayscale);
      }

      brightness = function() {
        runFilter('brightness', Filters.brightness, 40);
      }

      threshold = function() {
        runFilter('threshold', Filters.threshold, 128);
      }

      sharpen = function() {
        runFilter('sharpen', Filters.convolute,
          [ 0, -1,  0,
           -1,  5, -1,
            0, -1,  0]);
      }

      blurC = function() {
        runFilter('blurC', Filters.convolute,
          [ 1/9, 1/9, 1/9,
            1/9, 1/9, 1/9,
            1/9, 1/9, 1/9 ]);
      }

      sobel = function() {
        runFilter('sobel', function(px) {
          px = Filters.grayscale(px);
          var vertical = Filters.convoluteFloat32(px,
            [-1,-2,-1,
              0, 0, 0,
              1, 2, 1]);
          var horizontal = Filters.convoluteFloat32(px,
            [-1,0,1,
             -2,0,2,
             -1,0,1]);
          var id = Filters.createImageData(vertical.width, vertical.height);
          for (var i=0; i<id.data.length; i+=4) {
            var v = Math.abs(vertical.data[i]);
            id.data[i] = v;
            var h = Math.abs(horizontal.data[i]);
            id.data[i+1] = h
            id.data[i+2] = (v+h)/4;
            id.data[i+3] = 255;
          }
          return id;
        });
      }

      custom = function() {
        var inputs = document.getElementById('customMatrix').getElementsByTagName('input');
        var arr = [];
        for (var i=0; i<inputs.length; i++) {
          arr.push(parseFloat(inputs[i].value));
        }
        runFilter('custom', Filters.convolute, arr, true);
      }

    }, false);
  </script>
		
</body>
</html>
```