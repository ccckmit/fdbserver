# 第 1 章 - 程式入門

```
沒有程式，電腦只是一台垃圾而已！
```

## 程式是甚麼？

現代的電腦種類很多，除了最常見的桌上型電腦之外，像是一百元的那種計算機，每個人都有的手機，還有嵌入在冷氣微波爐裡的控制器等等，都算是一台電腦。

但是、這些電腦如果沒有程式在上面跑，那你絕對不會想要用它 (事實上是根本沒辦法用它)。

舉例而言，假如您買的電腦，上面沒有灌《作業系統或開機程式》 (像是 Windows, Linux, Mac OSX, Android, iOS) 的話，那麼這台電腦開機後，畫面上只會出現一片漆黑而已。

而這些《作業系統和開機程式》，都是電腦一開始啟動就需要執行的程式。

您看到的電腦，通常不是只有硬體，而是上面有跑程式的《軟體+硬體》所組成的一台完整機器。

所以、《程式很重要、程式很重要、程式很重要》，.....

如果你會寫程式，那麼你可以控制電腦！

如果你只會玩電動，那就只能被電腦控制！

如果你又會寫程式又會玩電動，而且還可以寫電動給自己玩，甚至改人家的電動程式，那麼就可以達到人機合一的鋼鐵人境界！

### 一小時學會圖像式程式設計

現在、就讓我們開始學習寫程式吧！

為了降低難度，我們先利用 code.org 裡的憤怒鳥遊戲，來學習撰寫《視覺化的程式設計》，請先看完下列影片！

* [Hour of Code - Introduction](https://youtu.be/bQilo5ecSX4)

然後開始做『Hour of Code』的練習。

* <https://studio.code.org/hoc/1>

我曾經在大學資工系的第一堂程式設計上，讓同學們進行上述『Hour of Code』練習，很多同學可以在兩個小時內破完這 20 關。

當您開始寫函數時，可能會因為不熟悉而不知該怎麼建構區塊，以下是一個使用函數區塊的範例，請參考：

![[]](codeorg_function.jpg)


### JavaScript 程式語言

瀏覽器、前端、後端，全堆疊、社群

## Node.js 開發環境

### 簡介

Node.js 是 Ryan Dahl 基於 Google 的 V8 引擎於 2009 年釋出的一個 JavaScript 開發平台，主要聚焦於 Web 程式的開發，通常用被來寫網站。

但是、要開發網站就勢必要把「 HTML, CSS, Web」等等技術扯進來，這對那些單純想用 JavaScript 做為第一門語言的學習者而言，勢必是非常困擾的。有鑑於此，我們將撰寫一系列用 Node.js 學基礎 JavaScript 語法的文章，以便讓初學者也能透過 Node.js 這個環境學會 JavaScript 語言。

### node.js 的安裝

您可以 node.js 的官方網站中下載並安裝此一開發環境，網址如下：

* <http://nodejs.org/>

![[圖、Node.js 的官網首頁]](NodeJsSite.jpg)

您可以點入官網的 INSTALL 連結下載安裝程式，然後一直按下一步就可以安裝完成了。(筆者所使用的環境是 Windows 7，所以下載時會得到 windows 版的安裝檔，例如 node-v0.10.26-x64.msi 這樣的檔案)。

筆者在 Windows 7 中安裝完成之後，點選「開始/所有程式/node.js」可以看到如下畫面：

![[圖、在 Windows 7 下開啟 Node.js 環境]](NodeEnv.jpg)

在上圖中，我們點選了 `node.js command prompt` 起動了一個命令列環境，然後寫了一個 hello.js 的程式如下。

檔案： hello.js

```javascript
console.log("hello!");
```

我們將 hello.js 檔案放在 `D:\jsbook\` 這個資料夾裏面，接著用 `node hello.js` 這個指令執行該程式，於是畫面中會出現該程式的執行結果，印出 `hello!` 訊息！

然後在右下半部的圖片中，我們點選了綠色圖示的 `node.js` 交談環境，接著輸入一些簡單的指令，這個環境可以讓您很容易的與 node.js 互動，試驗一下 JavaScript 指令的執行結果。

### 變數與指定

要學習一個程式語言，通常必須從變數宣告開始，變數可以想像成用來存放一些值的容器。舉例而言，當我們寫下 x=5 的時候，就是在 x 這個變數裏，放入 5 這個數值，同樣的我們也可以設定變數 y 為 3。

為了學習這些慨念，請您打開「開始/所有程式/node.js」這個綠色圖示的程式，然後輸入下列指令看看：

![[圖、變數與運算操作]](NodeJsVarExp.jpg)

您可以看到在上述操作中，我們宣告了 x,y,s,w 等變數，其中 `x=3, y=5, s="hello", w=" world!"` ，由於 x,y 都被指定為整數，因此可以進行加減乘除的運算，而 s,w 則被指定為字串，因此只能執行連接運算，在 JavaScript 中的字串連接也是採用加法符號 `+` 表示的。

### 基本型態

JavaScript 的變數，可以是「數值 (Number)、字串 (String) 、布林 (Boolean) 、陣列 (Array) 或物件 (Object)」等型態，其中的陣列與物件是複合型態，其他三種為基本型態，以下是一些關於基本型態的操作指令。

![[圖、JavaScript 的基本型態操作]](NodeJsType.jpg)

## node操作

### 循序性 1

```
> a=1
1
> a=a+1
2
> a=a+1
3
> a=a+1
4
> a=a+1
5
> a
5
```

### 學程式一開始對 x=x+1 這個句子的迷惑？

```
今天上大一第一門程式設計課，有位同學問了一個我遺忘了好久的問題。

程式裏的 x=x+1 是什麼意思呢？這樣不是應該不成立嗎？

後來我想起了自己剛學程式時也困惑了一陣子。

在數學裡，如果 x=x+1 的話，那麼整個數學系統就全面崩潰了。

這個方程式根本就沒有解。

但是在程式裏，假如 x 原本是 2 ，那麼 x=x+1 就是：

『把 x 中的 2 取出來之後，和 1 相加完得到結果為 3，再把 3 塞回去給 x』

於是 x 就變成了 3 。

這個問題往往發生在那些數學太好的同學身上，但是如果因此而讓他學不會程式，老師也沒有解釋的話，那就太冤枉了。
```


### 循序性 2

```
> a=1
1
> b=2
2
> c=a+b
3
> c=c+b
5
> c=c+a
6

```


### 兩變數交換 1

```
> x=3; y=5
5
> x
3
> y
5
> t1=x; t2=y
5
> t1
3
> t2
5
> x=t2; y=t1
3
> x
5
> y
3

```

### 兩變數交換 2

```
> x=3; y=5
5
> x
3
> y
5
> t=x; x=y; y=t
3
> x
5
> y
3


```


# 加減乘除 

```
> i=1
1
> i=i+1
2
> i
2
> i++
2
> i
3
> i++
3
> i
4
> i++
4
> i
5
> a = 5
5
> a--
5
> a
4
> a--
4
> a
3
> a--
3
> a
2
> a=a-3
-1
> a
-1
> a=3*5+8/2
19
> b=4
4
> c=b*a
76
> d=a+b+c
99
> 33%8
1
> 33%10
3
> 33%9
6
> a=33%8
1
> a
1
> r=33%8
1
> d=33/8
4.125
> d*8
33
> 

```

# 布林判斷 

```
C:\Users\user>node
> 3=5
3=5
ReferenceError: Invalid left-hand side in assignment
    at Object.exports.createScript (vm.js:24:10)
    at REPLServer.defaultEval (repl.js:137:25)
    at bound (domain.js:250:14)
    at REPLServer.runBound [as eval] (domain.js:263:12)
    at REPLServer. (repl.js:392:12)
    at emitOne (events.js:82:20)
    at REPLServer.emit (events.js:169:7)
    at REPLServer.Interface._onLine (readline.js:210:10)
    at REPLServer.Interface._line (readline.js:546:8)
    at REPLServer.Interface._ttyWrite (readline.js:823:14)
> 3==5
false
> 3===5
false
> 3="3"
ReferenceError: Invalid left-hand side in assignment
    at Object.exports.createScript (vm.js:24:10)
    at REPLServer.defaultEval (repl.js:137:25)
    at bound (domain.js:250:14)
    at REPLServer.runBound [as eval] (domain.js:263:12)
    at REPLServer. (repl.js:392:12)
    at emitOne (events.js:82:20)
    at REPLServer.emit (events.js:169:7)
    at REPLServer.Interface._onLine (readline.js:210:10)
    at REPLServer.Interface._line (readline.js:546:8)
    at REPLServer.Interface._ttyWrite (readline.js:823:14)
> 3=="3"
true
> 3==="3"
false
> x=3
3
> 3===x
true
> 3==x
true
> 3>3
false
> 3>=3
true
> 3false
> 3true
> true && true
true
> true && false
false
> false && false
false
> true || true
true
> false || true
true
> false || false
false
> (3>2) && (3>1)
true
> (3>2) && (3>4)
false
> (3>2) || (3>4)
true
> !(3>2)
false
> !(3>4)
true
> 3 != "3"
false
> 3 !== "3"
true
> !true
false
> !false
true
> "hello"=="hello"
true
> "hello"="hi"
ReferenceError: Invalid left-hand side in assignment
    at Object.exports.createScript (vm.js:24:10)
    at REPLServer.defaultEval (repl.js:137:25)
    at bound (domain.js:250:14)
    at REPLServer.runBound [as eval] (domain.js:263:12)
    at REPLServer. (repl.js:392:12)
    at emitOne (events.js:82:20)
    at REPLServer.emit (events.js:169:7)
    at REPLServer.Interface._onLine (readline.js:210:10)
    at REPLServer.Interface._line (readline.js:546:8)
    at REPLServer.Interface._ttyWrite (readline.js:823:14)
> "hello"=="hi"
false
> true==true
true
> true==false
false
> true==(1>3)
false
> true==(1true
>
```


## 結語

在本文中，我們從安裝 node.js 開始，介紹了如何使用 node.js 開發環境，以及最基本的 JavaScript 程式觀念。在下一期當中，我們將介紹 if, for, while 等流程控制語法的概念，然後再介紹函數這個基本的模組化概念。

## 參考文獻
* [RUNOOB : Node.js 教程](http://www.runoob.com/nodejs/nodejs-tutorial.html)
