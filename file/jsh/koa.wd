# Koa 伺服端框架

Node.js 並非唯一的後端平台，撰寫伺服端程式還可以用 PHP, Ruby on Rail, Python Django, Google 的 Go 語言等等，甚至是用古老的 CGI 系統接上 C 語言也可以寫。

但由於前端瀏覽器只支援 JavaScript 語言，這使得像 Node.js 可以採用同一種語言撰寫前後端，並且讓程式在前後端移來移去，設計出同時支援前後端的函式庫。

雖然 javascript + Node.js 具有這種優勢，但是技術常常會有新發展，最近提出來的 Web Assembly 規格一旦被納入標準並被瀏覽器納入實作後，未來或許其他語言也可以寫前端的瀏覽器程式，但這很可能得等到 2020 年之後了。

## 簡介

* 說明：  express 原班人馬創造支援 ES6 新語法 yield 的套件

* 官網專案： <https://github.com/koajs/koa>

* 推薦文章：[A Simple CRUD Demo with Koa.js
Sunday, January 12, 2014](http://weblogs.asp.net/shijuvarghese/a-simple-crud-demo-with-koa-js?hc_location=ufi)

* 推薦影片： James Moore (共十集） -- <http://knowthen.com/category/node-js/>

* 官方範例： <https://github.com/koajs/examples>

* 相關套件： <https://github.com/koajs/koa/wiki>

## 官方範例

請先安裝 git, io.js 並用下列指令下載 koa.js 官方範例後，再開始執行後面給的例子。

```
$ git clone https://github.com/koajs/examples.git
$ cd examples
$ ren examples koa-ex
$ npm install
$ npm install swig
```


## Koa 的第一個程式範例 - Hello

* <https://github.com/koajs/examples/tree/master/hello-world>

檔案： koa-hello.js

```
var koa = require('koa');
var app = module.exports = koa();

app.use(function *(){
  this.body = 'Hello World';
});

if (!module.parent) app.listen(3000);
```

## Koa 範例 -- 檔案下載串流

* <https://github.com/koajs/examples/tree/master/stream-file>

檔案： koaStream.js

```
var koa = require('koa');
var fs = require('fs');
var app = module.exports = koa();
var path = require('path');
var extname = path.extname;

// try GET /app.js

app.use(function *() {
  var path = __dirname + this.path;
  var fstat = yield stat(path);

  if (fstat.isFile()) {
    this.type = extname(path);
    this.body = fs.createReadStream(path);
  }
});

if (!module.parent) app.listen(3000);

/**
 * thunkify stat
 */

function stat(file) {
  return function (done) {
    fs.stat(file, done);
  };
}
```

## Koa 範例: templates

* 原始碼： <https://github.com/koajs/examples/tree/master/templates>
* 使用方法： 執行 iojs index 之後看 http://localhost:4000/

## Koa 範例: 網誌

* 原始碼： <https://github.com/koajs/examples/tree/master/blog>

```
D:\git\koa-ex>npm install swig
swig@1.4.2 node_modules\swig
├── optimist@0.6.1 (wordwrap@0.0.2, minimist@0.0.10)
└── uglify-js@2.4.19 (uglify-to-browserify@1.0.2, async@0.2.10, yargs@3.5.4,
source-map@0.1.34)

D:\git\koa-ex>cd blog

D:\git\koa-ex\blog>iojs index
listening on port 3000
  <-- GET /post
  --> GET /post 404 23ms -
  <-- GET /
  --> GET / 200 116ms -
  <-- GET /post/new
  --> GET /post/new 200 18ms -
  <-- POST /post
  --> POST /post 302 47ms -
  <-- GET /
  --> GET / 200 10ms -
  <-- GET /post/new
  --> GET /post/new 200 40ms -
  <-- POST /post
  --> POST /post 302 32ms -
  <-- GET /
  --> GET / 200 25ms -
  <-- GET /post/0
  --> GET /post/0 200 8ms -
  <-- GET /post/1
  --> GET /post/1 200 7ms -
  <-- GET /post/new
  --> GET /post/new 200 5ms -

```

執行結果

![[]](koa_blog.jpg)



