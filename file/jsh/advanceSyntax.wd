# 進階語法與技巧

xxx

# 事件的概念

* [JavaScript event 事件](http://www.wibibi.com/info.php?tid=384)
* [W3School/JavaScript HTML DOM 事件](http://www.w3school.com.cn/js/js_htmldom_events.asp)
* [于江水/JavaScript 和事件](http://yujiangshui.com/javascript-event/)


# 文檔物件模型 DOM

DOM (Document Object Model) 是網頁被瀏覽器載入後，以物件結構存放在記憶體中，所形成的一個物件模型。

請參考下列文件！

* [MDN:文件物件模型 (DOM)](https://developer.mozilla.org/zh-TW/docs/Gecko_DOM_Reference)
 * [Examples of web and XML development using the DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples)

其中最上層的物件稱為 window ，請參考下列文件的說明。

* [MDN/Web technology for developers/Web API Interfaces/Window](https://developer.mozilla.org/en-US/docs/Web/API/Window)

而 window 中有一個重要的物件代表該文件，稱為 document ：

* [MDN/Web technology for developers/Web API Interfaces/Window/Window.document](https://developer.mozilla.org/en-US/docs/Web/API/Window/document)



# JavaScript 的遞迴函數

```
我，呼叫自己。

在還沒到達盡頭之前，

我，呼叫我自己。
```

## 遞迴範例 1

範例： @[[recursive.js]](code/recursive.js)

```
function sum(n) {
    var s=0;
    for (var i=1; i<=n; i++)
        s += i;
    return s;
}

function s(n) {
    if (n==1) return 1;
    return s(n-1)+n;
}

function f(n) {
    if (n==0) return 1;
    if (n==1) return 1;
    return f(n-1)+f(n-2);
}

var log = console.log;
log("f(5)=%d", f(5));
log("sum(10)=%d", sum(10));
log("s(10)=%d", s(10));
```

## 簡化後的版本

檔案： s10.js

```
function s(n) {
    if (n==1) return 1;
    var sn = s(n-1)+n;
    return sn;
}

console.log("s(10)=%d", s(10));
```

執行結果：

```
nqu-192-168-61-142:code mac020$ node s10
s(10)=55

```

## 追蹤遞迴過程
將函數 s(n) 修改如下以印出中間結果，並觀察執行過程：

檔案： @[[sum_recursive.js]](code/sum_recursive.js)

```
function s(n) {
    if (n==1) return 1;
    var sn = s(n-1)+n;
    console.log("s(%d)=%d", n, sn);
    return sn;
}

console.log("s(10)=%d", s(10));
```

執行結果：

```
$ node sum_recursive
s(2)=3
s(3)=6
s(4)=10
s(5)=15
s(6)=21
s(7)=28
s(8)=36
s(9)=45
s(10)=55
s(10)=55

```


# 習題:用遞迴的方法算 n!

```
n! = n*(n-1)!
1! = 1
```

若 f(n) 代表 n! ，那麼上述算式可以改寫如下！

```
f(n) = n*f(n-1)
f(1) = 1
```

請用遞迴的方式寫出 f(n) 函數，並用 f(10) 進行測試!

解答： @[[factorial_recursive.js]](code/factorial_recursive.js)

# 習題：自動產生英文語句

提示：先用簡單的幾個字加上基本語法就行了，不用一下企圖心太大。

簡易語法

```
S = NP VP
NP = DET N
VP = V NP
N = dog | cat
V = chase | eat
DET = a | the
```

產生過程的範例

```
S = NP VP = (DET N) (V NP) 
  = (a dog) (chase DET N) 
  = a dog chase a cat
```

解答： @[[gensentence.js]](code/gensentence.js)


# 自動產生數學式

在看這篇文章之前，請先用用 scigen 一秒鐘之內寫一篇論文。

* <https://pdos.csail.mit.edu/archive/scigen/>

接著請想想，這種程式該怎麼做呢？

讓我們用一個更簡單的例子示範，那就是自動產生數學運算式。

檔案： @[[genexp]](code/genexp.js)

```
// === BNF Grammar =====
// E = T [+-*/] E | T
// T = [0-9] | (E)

function print(s) {
	process.stdout.write(s);
}

// 用法:randInt(3,7) 會傳回 3,4,5,6,7 其中之一
function randInt(a, b) { // 隨機傳回一個介於 (a,b) 間的整數 (包含 a, b)
	return Math.floor((Math.random() * (b-a+1)) + a);
}

function randChar(str) {
  var len = str.length;
  var i = randInt(0, len-1);
  return str[i];
}

function E() {
	if (randInt(1,10) <= 5) {
		T(); print(randChar("+-*/")); E();
	} else {
		T();
	}
}

function T() {
	if (randInt(1,10) < 7) {
		print(randChar("0123456789"));
	} else {
		print("("); E(); print(")");
	}
}

for (var i=0; i<10; i++) {
	E();
	print("\n");
}
```

執行結果

```
nqu-192-168-61-142:code mac020$ node genexp
4
0/0+(2)*9
4-(9)*((((3*(4))-(8))+(0)+8/(8)+2)+2/6)
3/(((((1*8+6)))))*((6/4/3))/(((2+9))+(((2))+8/((4*(5))*2))/4)
(1+(1))-((7))
(2+(((4))))+(5)
((1/(((3+(7)-(4-1)/9*8/7-6)/(4)-3+3)-6-9*(((2+(((6*4/4)))*(8/3))))-9-0-1+5*8*((5)/(3)-1/(1)-9)+(5+5*5))))*5/2
8
1
(0)*7
```

# 自動產生運算式2

```javascript
function rand(a,b) { 
	return a+Math.random()*(b-a); 
}

function randInt(a,b) { 
	return Math.floor(rand(a,b)); 
}

function randSelect(array) { 
	return array[randInt(0,array.length)]; 
}

/*
E = N | E [+/-*] E
N = 0-9
*/

function E() {
    var gen = randSelect(["N", "EE"]);
    if (gen  === "N") {
        return N();
    } else {
        return E() + randSelect(["+", "-", "*", "/"]) + E();
    } 
}

function N() {
    return randSelect(["1", "2", "3", "4", "5", "6", "7", "8", "9"]);
}

var e = E();
console.log(e, "=", eval(e));
```

執行結果

```
NQU-192-168-60-101:ccc csienqu$ node genexp.js
7 = 7
NQU-192-168-60-101:ccc csienqu$ node genexp.js
6*4-6+8/3 = 20.666666666666668
NQU-192-168-60-101:ccc csienqu$ 

```

檔案：copyfileCallback.js

```javascript
var fs = require('fs');
fs.readFile("a1.txt", "utf8", function(err, data) {
  console.log('read a1 complete!');
  fs.writeFile("a2.txt",  data, function(err) {
    console.log('write a2 complete!');
  });
});
```

## 多層回呼

檔案：copyfile2.js

```javascript
var fs = require('fs');
var data = fs.readFileSync("a1.txt");
console.log(data);
fs.writeFileSync("a2.txt", data);
var data2 = fs.readFileSync("a2.txt");
console.log(data);
fs.writeFileSync("a3.txt", data);
```

檔案：copyfileCallback2.js

```javascript
var fs = require('fs');
fs.readFile("a1.txt", "utf8", function(err, data) {
  console.log('read a1 complete!');
  fs.writeFile("a2.txt",  data, function(err) {
    console.log('write a2 complete!');
    fs.readFile("a2.txt", "utf8", function(err, data) {
      console.log('read a2 complete!');
      fs.writeFile("a3.txt",  data, function(err) {
        console.log('write a3 complete!');
      });
    });
  });
});
```

## 使用 Async 避免多層回呼

檔案： copyFileAsync2.js

```javascript
var fs = require('fs');
var async = require('async');
var text = null;

async.series([
  function(callback) {
    fs.readFile("a1.txt", "utf8", function(err, data) { 
      console.log('read a1 complete!');
      text = data;
      console.log("read text="+text);
      callback();
    })
  },
  function(callback) {
    console.log("write text="+text);
    fs.writeFile("a2.txt",  text, function(err) {
      console.log('write a2 complete!');
      callback();
    })
  },
  function(callback) {
    fs.readFile("a2.txt", "utf8", function(err, data) {
      console.log('read a2 complete!');
      text = data;
      console.log("read text="+text);
      callback();
    })
  },
  function(callback) {
    console.log("write text="+text);
    fs.writeFile("a3.txt",  text, function(err) {
      console.log('write a3 complete!');
      callback();
    })
  }
], function done() {
  console.log('All finished!');
});
```



