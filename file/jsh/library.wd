# 函式庫

# 標準函式庫

* 来自《JavaScript 标准参考教程（alpha）》，by 阮一峰
 * <http://javascript.ruanyifeng.com/#stdlib>
 * <http://javascript.ruanyifeng.com/stdlib/object.html>
 * <http://javascript.ruanyifeng.com/stdlib/array.html>
 * <http://javascript.ruanyifeng.com/stdlib/wrapper.html>
 * <http://javascript.ruanyifeng.com/stdlib/number.html>
 * <http://javascript.ruanyifeng.com/stdlib/string.html>
 * <http://javascript.ruanyifeng.com/stdlib/math.html>
 * <http://javascript.ruanyifeng.com/stdlib/regexp.html>
 * <http://javascript.ruanyifeng.com/stdlib/json.html>


# node.js 系統函式庫

* <https://nodejs.org/api/>


# JavaScript 的 Callback 機制

參考：  

* Nodejs异步流程控制Async -- <http://blog.fens.me/nodejs-async/>
* Javascript中非同步執行的一些問題 -- <http://ithelp.ithome.com.tw/question/10119265>
* 使用Flow Control Library來解決非同步的流程問題 -- <http://ithelp.ithome.com.tw/question/10119281>
* node.js async.series not working -- <http://stackoverflow.com/questions/10779123/node-js-async-series-not-working>

## 回呼的使用

檔案：readfile.js

```javascript
var fs = require('fs'); // 引用檔案物件
var data = fs.readFileSync(process.argv[2], "utf8"); // 讀取檔案
console.log(data); // 顯示在螢幕上
```

檔案： readfileCallback.js

```javascript
var fs = require('fs'); // 引用檔案物件
fs.readFile(process.argv[2], "utf8", function(err, data) {
  console.log("data="+data);
});
console.log("----readFile End-----"); // 顯示在螢幕上
```

檔案：copyfile.js

```javascript
var fs = require('fs');
var data = fs.readFileSync(process.argv[2]);
console.log(data);
fs.writeFileSync(process.argv[3], data);
```

## 從鍵盤讀取輸入

* 參考 -- <http://nodejs.org/api/readline.html>

檔案：readline.js (讀取一行)

```
var readline = require('readline');

var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question("What do you think of node.js? ", function(answer) {
  // TODO: Log the answer in a database
  console.log("Thank you for your valuable feedback:", answer);

  rl.close();
});
```

檔案：readloop.js (讀取很多行)

```
var readline = require('readline');
var rl = readline.createInterface(process.stdin, process.stdout);

rl.setPrompt('OHAI> ');
rl.prompt();

rl.on('line', function(line) {
  switch(line.trim()) {
    case 'hello':
      console.log('world!');
      break;
    default:
      console.log('Say what? I might have heard `' + line.trim() + '`');
      break;
  }
  rl.prompt();
}).on('close', function() {
  console.log('Have a great day!');
  process.exit(0);
});
```

## 回呼的設計

檔案：callback.js

```javascript
function sum(n) {
  var i, s=0;
  for (i=1; i<=n; i++)
    s = s+i;
  return s;
}

function sum_async(n, callback) {
  var i, s=0;
  for (i=1; i<=n; i++)
    s = s+i;
  callback(s);
  return s;
}

console.log("sum(10)="+sum(10));

function sum_callback(total) {
  console.log("sum_callback:total="+total);
}

sum_async(10, sum_callback);

sum_async(10, function sum_callback2(total) {
  console.log("sum_callback2:total="+total);
});

sum_async(10, function (total) {
  console.log("1+...+10=total="+total);
});


```

# Node.js 版的小時鐘

JavaScript 內建的函數 setTimeOut() 是一個採用回呼方式設計的函數，以下是一個用回呼來印出時間的範例。

檔案： @[[clock.js]](code/clock.js)

```
function printTime() {
  console.log(new Date());
  setTimeout(printTime, 1000);
}

setTimeout(printTime, 1000);
```

執行結果

```
nqu-192-168-61-142:code mac020$ node clock
Mon Oct 12 2015 16:37:38 GMT+0800 (CST)
Mon Oct 12 2015 16:37:39 GMT+0800 (CST)
Mon Oct 12 2015 16:37:40 GMT+0800 (CST)
Mon Oct 12 2015 16:37:41 GMT+0800 (CST)
Mon Oct 12 2015 16:37:42 GMT+0800 (CST)
....
```

在上述的 printTime() 函數中，透過 setTimeout(printTime, 1000) 會在 1 秒之後再度呼叫 printTime() ，於是每隔 1 秒就會印出一次時間，這是一個結合遞迴與回呼的程式。