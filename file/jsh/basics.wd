# 第 2 章 - JavaScript 基本語法

## if 判斷

JavaScript 的 if 語句，和 C 語言幾乎一樣。舉例而言，下列程式可以根據 score 所設的定分數，來印出「及格」或「不及格」的訊息，只要大於 60 分，就算是及格了。

檔案：score.js

```javascript
var score = 61;

if (score >= 60)
  console.log("及格");
else
  console.log("不及格");
```

寫完上述程式之後，請務必將檔案儲存成 UTF8 的格式 (Unicode 8 位元模式) ，我的習慣是採用 Notepad++ 這個編輯器，然後儲存成「UTF8 檔首無 BOM」的格式，如下圖所示：

![[圖、在 Notepad++ 中設定存檔格式為 UTF8]](NotepadUtf8.jpg)

這樣，程式就可以正常印出「繁體中文」，結果如下所示：

![[圖、用 node 執行 score.js 的結果]](ifScoreRun.jpg)

如果您沒有儲存成 UTF8 的格式，而是用預設的 ANSI 格式，那麼印出來的中文就會看不到 (或者變成亂碼)，如下圖所示，這是因為 node.js 預設採用 UTF8 編碼的緣故。

![[圖、中文存成 ANSI 格式導致無法正常顯示的情況]](AnsiEncodeError.jpg)

因此請務必要將檔案儲存成 UTF8 格式，這樣會比較不容易出錯。

練習：請執行完上述程式之後，將 score 改為 56，再重新執行一次，看看會印出甚麼？

## 兩種相等判斷

在 javascript 當中，比較特別的一件事情是，是否相等的判斷通常有兩種，一種是兩個等號的 `==` ，另一種是參個等號的 `===`。

這兩種判斷到底差別在哪裡呢？答案是：三個等號者會判斷型態是否相等，因此是嚴格的相等，而兩個等號者不會判斷型態，因此是不嚴格的相等，以下範例說明了兩者的差異。

檔案：equals.js

```javascript
console.log('"30"==30 is ', "30" == 30);
console.log('"30"!=30 is ', "30" != 30);
console.log('"30"===30 is ', "30" === 30);
console.log('"30"!==30 is ', "30" !== 30);
```

執行結果：

```
D:\js\code>node equals.js
"30"==30 is  true
"30"!=30 is  false
"30"===30 is  false
"30"!==30 is  true
```

## while 迴圈

JavaScript 的迴圈與 C 是非常像的，包含 while 與 for 語句都幾乎是一樣的。以下是一個 JavaScript 的 while 迴圈範例。

檔案：while.js

```javascript
i=1;
while (i<=10) {
  console.log("i=", i);
  i = i + 1;
}
```

執行結果：

```
D:\jsbook>node while
i= 1
i= 2
i= 3
i= 4
i= 5
i= 6
i= 7
i= 8
i= 9
i= 10
```

如果我們在從 1 數到 10 的過程當中，把變數 i 進行累加，那麼就可以得到累加總和， 1+..+10 = 55 的結果如下。

檔案：whilesum.js

```javascript
sum=0;
i=1;
while (i<=10) {
  sum = sum + i;
  console.log("i=", i, " sum=", sum);
  i = i + 1;
}
```

執行結果

```
D:\jsbook>node whilesum
i= 1  sum= 1
i= 2  sum= 3
i= 3  sum= 6
i= 4  sum= 10
i= 5  sum= 15
i= 6  sum= 21
i= 7  sum= 28
i= 8  sum= 36
i= 9  sum= 45
i= 10  sum= 55
```

## for 迴圈

檔案：for.js

```javascript
for (i=1;i<=10;i++) {
  console.log("i=", i);
}
```

執行結果：

```
D:\jsbook>node for.js
i= 1
i= 2
i= 3
i= 4
i= 5
i= 6
i= 7
i= 8
i= 9
i= 10
```

當然、同樣的事情也可以用 for 迴圈來做，這種寫法會更短更簡潔，以下是採用 for 進行 1+...+10 的範例。

檔案：sum.js

```javascript
sum=0;
for (i=1;i<=10;i++) {
  sum = sum + i;
  console.log("i=", i, " sum=", sum);
}
```

執行結果：

```
D:\jsbook>node sum.js
i= 1  sum= 1
i= 2  sum= 3
i= 3  sum= 6
i= 4  sum= 10
i= 5  sum= 15
i= 6  sum= 21
i= 7  sum= 28
i= 8  sum= 36
i= 9  sum= 45
i= 10  sum= 55
```

另外、 javascript 也從 C 語言那裏繼承了 continue 與 break 等語句，遇到 continue 時會回到迴圈開頭，忽略後面語句。而遇到 break 時則會跳出迴圈。

檔案：forbreak.js

```javascript
for (i=1;i<=10;i++) {
  if (i == 3) continue;
  if (i == 8) break;
  console.log("i="+i);
}
```

執行結果：

```
D:\jsbook>node forbreak.js
i=1
i=2
i=4
i=5
i=6
i=7
```
