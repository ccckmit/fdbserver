# 資料庫

### node.js 常用的資料庫

### MongoDB 文件型 JSON 資料庫


# MongoDB -- 安裝與啟動

下載點: <https://www.mongodb.org/downloads>

下載完成後使用『下一步』大法即可完成安裝。

安裝完成之後，在 windows 下必須設定系統路徑，我的路徑在： 『C:\Program Files\MongoDB\Server\3.0\bin』 當中。

接著請啟動命令列，然後建立資料庫路徑 /db/mongodb/ ，接著輸入下列指令。

```
D:\db>mongod --dbpath /db/mongodb
```

此時 mongodb 伺服器就會啟動完成。

```
D:\db>mongo
MongoDB shell version: 3.0.2
connecting to: test
```

接著您就可以使用指令進行『新增/修改/刪除/查詢』了。

## 新增操作

參考： <http://www.w3cschool.cc/mongodb/mongodb-insert.html>

```javascript
> db.user.insert({user:"CCC", password:"123"})
WriteResult({ "nInserted" : 1 })
> db.user.find()
{ "_id" : ObjectId("55486b1327403e89a3cc397a"), "user" : "ccc", "password" : "123" }
> db.user.insert({user:"snoopy", password:"321"})
WriteResult({ "nInserted" : 1 })
> db.user.find()
{ "_id" : ObjectId("55486b1327403e89a3cc397a"), "user" : "ccc", "password" : "123" }
{ "_id" : ObjectId("55487073434ed6d677f8454d"), "user" : "snoopy", "password" : "321" }
```

## 修改操作

參考： <http://www.w3cschool.cc/mongodb/mongodb-update.html>


```javascript
> db.user.update({"user":"snoopy"}, {"user":"snoopy", "password":"snoopy321"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.user.find()
{ "_id" : ObjectId("55486b1327403e89a3cc397a"), "user" : "ccc", "password" : "123" }
{ "_id" : ObjectId("55487073434ed6d677f8454d"), "user" : "snoopy", "password" : "snoopy321" }
```

## 刪除操作

參考： <http://www.w3cschool.cc/mongodb/mongodb-remove.html>


```javascript
> db.user.find()
{ "_id" : ObjectId("55486b1327403e89a3cc397a"), "user" : "ccc", "password" : "123" }
{ "_id" : ObjectId("55487073434ed6d677f8454d"), "user" : "snoopy", "password" : "snoopy321" }
> db.user.remove({user:"ccc"})
WriteResult({ "nRemoved" : 1 })
> db.user.find()
{ "_id" : ObjectId("55487073434ed6d677f8454d"), "user" : "snoopy", "password" : "snoopy321" }
```

## 查詢操作

參考： <http://www.w3cschool.cc/mongodb/mongodb-update.html>


```javascript
> db.user.insert({user:"garfield", password:"cookie"})
WriteResult({ "nInserted" : 1 })
> db.user.find()
{ "_id" : ObjectId("55487073434ed6d677f8454d"), "user" : "snoopy", "password" : "snoopy321" }
{ "_id" : ObjectId("55487d09434ed6d677f8454e"), "user" : "garfield", "password": "cookie" }
> db.user.find({user:"garfield"})
{ "_id" : ObjectId("55487d09434ed6d677f8454e"), "user" : "garfield", "password": "cookie" }
> db.user.find({user:"snoopy"})
{ "_id" : ObjectId("55487073434ed6d677f8454d"), "user" : "snoopy", "password" :"snoopy321" }
```

# MongoDB -- 進階操作

## 連接開啟 mydb 資料庫

```javascript
D:\db>mongo mydb
MongoDB shell version: 3.0.2
connecting to: mydb
```

## 新增三筆資料

```javascript
> db.users.insert({name:"ccc", age:45, password:"321"})
WriteResult({ "nInserted" : 1 })
> db.users.insert({name:"snoopy", age:5, password:"snoopy123"})
WriteResult({ "nInserted" : 1 })
> db.users.insert({name:"garfield", age:9, password:"garfield123"})
WriteResult({ "nInserted" : 1 })
> db.users.find()
{ "_id" : ObjectId("55487ecd3c69cbdeba209fb3"), "name" : "ccc", "age" : 45, "password" : "321" }
{ "_id" : ObjectId("55487ede3c69cbdeba209fb4"), "name" : "snoopy", "age" : 5, "password" : "snoopy123" }
{ "_id" : ObjectId("55487eed3c69cbdeba209fb5"), "name" : "garfield", "age" : 9,"password" : "garfield123" }
```


## 條件式查詢

參考： <http://www.w3cschool.cc/mongodb/mongodb-operators.html>

```javascript
> db.users.find({age :{$gt : 8}})
{ "_id" : ObjectId("55487ecd3c69cbdeba209fb3"), "name" : "ccc", "age" : 45, "password" : "321" }
{ "_id" : ObjectId("55487eed3c69cbdeba209fb5"), "name" : "garfield", "age" : 9,"password" : "garfield123" }
> db.users.find()
{ "_id" : ObjectId("55487ecd3c69cbdeba209fb3"), "name" : "ccc", "age" : 45, "password" : "321" }
{ "_id" : ObjectId("55487ede3c69cbdeba209fb4"), "name" : "snoopy", "age" : 5, "password" : "snoopy123" }
{ "_id" : ObjectId("55487eed3c69cbdeba209fb5"), "name" : "garfield", "age" : 9, "password" : "garfield123" }
> db.users.find().limit(2)
{ "_id" : ObjectId("55487ecd3c69cbdeba209fb3"), "name" : "ccc", "age" : 45, "password" : "321" }
{ "_id" : ObjectId("55487ede3c69cbdeba209fb4"), "name" : "snoopy", "age" : 5, "password" : "snoopy123" }
> db.users.find().limit(2).skip(1)
{ "_id" : ObjectId("55487ede3c69cbdeba209fb4"), "name" : "snoopy", "age" : 5, "password" : "snoopy123" }
{ "_id" : ObjectId("55487eed3c69cbdeba209fb5"), "name" : "garfield", "age" : 9,"password" : "garfield123" }
```

## 排序與索引

```javascript
> db.users.find().sort({age:1})
{ "_id" : ObjectId("55487ede3c69cbdeba209fb4"), "name" : "snoopy", "age" : 5, "password" : "snoopy123" }
{ "_id" : ObjectId("55487eed3c69cbdeba209fb5"), "name" : "garfield", "age" : 9,"password" : "garfield123" }
{ "_id" : ObjectId("55487ecd3c69cbdeba209fb3"), "name" : "ccc", "age" : 45, "password" : "321" }
> db.users.find().sort({age:-1})
{ "_id" : ObjectId("55487ecd3c69cbdeba209fb3"), "name" : "ccc", "age" : 45, "password" : "321" }
{ "_id" : ObjectId("55487eed3c69cbdeba209fb5"), "name" : "garfield", "age" : 9,"password" : "garfield123" }
{ "_id" : ObjectId("55487ede3c69cbdeba209fb4"), "name" : "snoopy", "age" : 5, "password" : "snoopy123" }
> db.users.ensureIndex({name:1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
```

## 離開

```javascript
> quit()

D:\db>
```

# 日期與時間操作

```
> db.filelog.insert({path:'wd.html', time:new Date()})
WriteResult({ "nInserted" : 1 })
> db.filelog.find()
{ "_id" : ObjectId("571d78c179eb77457f34a8b5"), "path" : "wd.html", "time" : ISO
Date("2016-04-25T01:54:09.026Z") }
>

```

# MongoDB -- 使用 node.js 存取

您若要在 node.js 當中存取 mongoDB 的資料，必須先用 npm 安裝 mongoDB 的套件。

```
npm install mongodb
```

但是這個套件有用到原生程式 (c 語言） 的 node-gyp 套件，必須先安裝 python 才能安裝成功，因此您必須先下載 python 2.X （不要下載 3.x) 版並安裝後才能執行上述指令。

Python 的安裝方法請參考 [如何在 Windows 平台建立 Python 編程環境](http://www.foolegg.com/how-to-build-a-python-programming-environment-on-windows/) 這篇文章。

安裝並設定好系統路徑之後，您可以啟動 node.js 的命令列環境，並且用下列操作試試看 python 是否安裝成功。

```
C:\Users\user>python
Python 2.7.9 (default, Dec 10 2014, 12:24:55) [MSC v.1500 32 bit (Intel)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()
```

上述是安裝成功的情況。

另外這個套件還用到 NET framework 2.0 sdk 2 ，您必須從 下列網址下載。

* <http://www.microsoft.com/en-us/download/details.aspx?id=15354>

下載完後會是一個 setup.exe 檔案，但如果您用的是 win 8, 則無法執行，必須先用 winRAR 解壓縮之後，會出現一個 install.exe ，然後按滑鼠右鍵選擇『以系統管理員身份執行』才可以安裝，這個訊息來自下列文章。

* <http://stackoverflow.com/questions/13980882/installing-net-2-0-sdk-on-windows-8>


接著請再用一次下述指令安裝 node.js 的 mongodb 套件。

```
npm install mongodb
```

## 程式範例: mongotest.js

參考： <https://mongodb.github.io/node-mongodb-native/api-articles/nodekoarticle1.html>


```javascript
var MongoClient = require('mongodb').MongoClient;

MongoClient.connect("mongodb://localhost:27017/examdb", function(err, db) {
  if(err) { return console.dir(err); }

  var collection = db.collection('Q');
  var docs = [{ type:"word", q:"he=他"}, { type:"word", q:"she=她"}, { type:"word", q:"it=它"} ];

  collection.insert(docs, {w:1}, function(err, result) { // success!

    collection.find().toArray(function(err, items) {
        console.log("items=%j", items);
        db.close();
    });
  });
});
```

執行結果：

```
nqu-192-168-61-142:KoaExam mac020$ node mongotest
items=[{"_id":"5716e82ea6c866eb02ffe700","type":"word","q":"he=他"},{"_id":"5716e82ea6c866eb02ffe701","type":"word","q":"she=她"},{"_id":"5716e82ea6c866eb02ffe702","type":"word","q":"it=它"}]
```

## 採用 yield 的寫法

檔案： comongotest.js

```
var co = require("co");

var MongoClient = require('mongodb').MongoClient;

co(function*() {
  var db = yield MongoClient.connect('mongodb://localhost:27017/examdb');
  var collection = db.collection('Q');
  var result = yield collection.insertMany([{ type:"word", q:"he=他"}, { type:"word", q:"she=她"}, { type:"word", q:"it=它"} ], {w:1});
  var items = yield collection.find().toArray();
  console.log("items=%j", items);
  var result = yield db.close();
});

```

執行結果

```
NQU-192-168-60-101:js csienqu$ node comongotest
items=[{"_id":"57201788d3c8212f034d9479","type":"word","q":"he=他"},{"_id":"57201788d3c8212f034d947a","type":"word","q":"she=她"},{"_id":"57201788d3c8212f034d947b","type":"word","q":"it=它"}]

```

## 程式 2 : 修改後的 mongotest.js

```javascript
var MongoClient = require('mongodb').MongoClient;

MongoClient.connect("mongodb://localhost:27017/examdb", function(err, db) {
  if(err) { return console.dir(err); }

  var collection = db.collection('Q');
  var docs = [{ type:"word", q:"he=他"}, { type:"word", q:"she=她"}, { type:"word", q:"it=它"} ];

  collection.insert(docs, {w:1}, function(err, result) { // success!
/*
    collection.find().toArray(function(err, items) {
        console.log("items=%j", items);
        db.close();
    });
 */
    var stream = collection.find({}).stream();
    stream.on("data", function(item) {
        console.log("item=%j", item);
        
    });
    stream.on("end", function() {
        db.close();        
    });

//    collection.findOne({}, function(err, item) {});

  });
});
```

執行結果

```
nqu-192-168-61-142:KoaExam mac020$ node mongotest
item={"_id":"554973e94a33f3c734326fc3","type":"word","q":"mother=母親"}
item={"_id":"554974024a33f3c734326fc4","type":"word","q":"father=父親"}
item={"_id":"554974164a33f3c734326fc5","type":"word","q":"brother=兄弟"}
item={"_id":"5549742c4a33f3c734326fc6","type":"word","q":"sister=姐妹"}
item={"_id":"55497a5e0e398b91d8688819","type":"word","q":"he=他"}
item={"_id":"55497a5e0e398b91d868881a","type":"word","q":"she=她"}
item={"_id":"55497a5e0e398b91d868881b","type":"word","q":"it=它"}
item={"_id":"55497b05deaa289bd81022b5","type":"word","q":"he=他"}
item={"_id":"55497b05deaa289bd81022b6","type":"word","q":"she=她"}
item={"_id":"55497b05deaa289bd81022b7","type":"word","q":"it=它"}
item={"_id":"55497b65609521a0d85f3a33","type":"word","q":"he=他"}
item={"_id":"55497b65609521a0d85f3a34","type":"word","q":"she=她"}
item={"_id":"55497b65609521a0d85f3a35","type":"word","q":"it=它"}
item={"_id":"55497bc4fab0d8a3d8718985","type":"word","q":"he=他"}
item={"_id":"55497bc4fab0d8a3d8718986","type":"word","q":"she=她"}
item={"_id":"55497bc4fab0d8a3d8718987","type":"word","q":"it=它"}
item={"_id":"55497cbf5a5f3aa9d8380b08","type":"word","q":"he=他"}
item={"_id":"55497cbf5a5f3aa9d8380b09","type":"word","q":"she=她"}
item={"_id":"55497cbf5a5f3aa9d8380b0a","type":"word","q":"it=它"}
item={"_id":"55497ccb9f0e23add8f5f9d6","type":"word","q":"he=他"}
item={"_id":"55497ccb9f0e23add8f5f9d7","type":"word","q":"she=她"}
item={"_id":"55497ccb9f0e23add8f5f9d8","type":"word","q":"it=它"}
```



## 參考文獻

* <http://stackoverflow.com/questions/19612338/inserting-the-current-datetime-in-mongodb>

# 使用 yield/generator 的方式呼叫 mongoDB

* 參考： (使用 yield)
 * <http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find>
* 對照： (不使用 yield)
 * <http://expressjs.com/zh-tw/guide/database-integration.html#mongo>

```
// A simple query using the find method and toArray method with a Generator and the co module.

var MongoClient = require('mongodb').MongoClient,
  co = require('co');
  test = require('assert');

co(function*() {
  var db = yield MongoClient.connect('mongodb://localhost:27017/test');

  // Create a collection we want to drop later
  var collection = db.collection('simple_query_with_generators');

  // Insert a bunch of documents for the testing
  yield collection.insertMany([{a:1}, {a:2}, {a:3}], {w:1});

  // Peform a simple find and return all the documents
  var docs = yield collection.find().toArray();
  test.equal(3, docs.length);

  // Close the db
  db.close();
});
```


原來 mongodb native 已經支援 yield 了，害我搞了半天！

* <http://mongodb.github.io/node-mongodb-native/2.1/api/>

```
/ Example of using keepGoing to allow batch insert using a Generator and the co module to complete even when there are illegal documents in the batch

var MongoClient = require('mongodb').MongoClient,
  co = require('co');
  test = require('assert');

co(function*() {
  var db = yield MongoClient.connect('mongodb://localhost:27017/test');

  // Create a collection
  var collection = db.collection('keepGoingExample_with_generators');

  // Add an unique index to title to force errors in the batch insert
  yield collection.ensureIndex({title:1}, {unique:true});

  // Insert some intial data into the collection
  yield collection.insertMany([{name:"Jim"}
    , {name:"Sarah", title:"Princess"}], {w:1});

  try {
    // Force keep going flag, ignoring unique index issue
    yield collection.insert([{name:"Jim"}
      , {name:"Sarah", title:"Princess"}
      , {name:'Gump', title:"Gump"}], {w:1, keepGoing:true});
  } catch(err) {}
  // Count the number of documents left (should not include the duplicates)
  var count = yield collection.count();
  test.equal(3, count);
}).catch(function(err) {
  console.log(err.stack)
});
```

詳細請看：

* <https://github.com/mongodb/node-mongodb-native>
 * [MongoDB Node.JS Driver](http://mongodb.github.io/node-mongodb-native/)
 * <http://mongodb.github.io/node-mongodb-native/2.1/api/>

# 參考文獻
* [Express 資料庫整合](http://expressjs.com/zh-tw/guide/database-integration.html)

# Koa-Mongodb 範例

* <https://github.com/marcusoftnet/koablog-mongo>


## PostgreSQL 關聯式資料庫

## 記憶體資料庫 Redis

* <http://redis.io/>
* [維基百科:Redis](https://zh.wikipedia.org/wiki/Redis)
* [【直擊Modern Web 2015】開源資料庫Redis實戰經驗大公開](http://www.ithome.com.tw/news/96109)
